{
  "stats": {
    "suites": 4,
    "tests": 8,
    "passes": 7,
    "pending": 0,
    "failures": 1,
    "start": "2023-09-21T07:31:22.821Z",
    "end": "2023-09-21T07:32:32.783Z",
    "duration": 69962,
    "testsRegistered": 8,
    "passPercent": 87.5,
    "pendingPercent": 0,
    "other": 1,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9d4bf576-2874-45af-8d5e-48506c4b37b6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b3d7a09-3879-472a-82ad-aab2f165cba9",
          "title": "add todo tests",
          "fullFile": "D:\\Testing\\seleniumDemo\\tests\\firstTest.js",
          "file": "\\tests\\firstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a todo to applicatiom",
              "fullTitle": "add todo tests successfully adds a todo to applicatiom",
              "timedOut": null,
              "duration": 4854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000);\n    //1 - launch the browser\n    let driver = await new Builder().forBrowser(\"firefox\").build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "211e430d-96d2-49aa-b188-9684f41b8661",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "211e430d-96d2-49aa-b188-9684f41b8661"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4854,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "8d5da2b9-a76a-45ea-9633-4834d83b9e79",
          "title": "add second todo tests",
          "fullFile": "D:\\Testing\\seleniumDemo\\tests\\secondTest.js",
          "file": "\\tests\\secondTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"add second todo tests\"",
              "fullTitle": "add second todo tests \"before each\" hook in \"add second todo tests\"",
              "timedOut": null,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": null,
              "context": null,
              "code": "ltCapabilities.capabilities.name = this.currentTest.title;\n\ndriver = new Builder()\n.usingServer(gridUrl)\n.withCapabilities(ltCapabilities.capabilities)\n.build();",
              "err": {},
              "uuid": "2087839f-b8f0-4c3d-8834-9b16ce922e7d",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook for \"successfully adds second todo to applicatiom\"",
              "fullTitle": "add second todo tests \"after each\" hook for \"successfully adds second todo to applicatiom\"",
              "timedOut": null,
              "duration": 2005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": null,
              "context": null,
              "code": "await driver.quit();",
              "err": {
                "message": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Testing\\seleniumDemo\\tests\\secondTest.js)",
                "estack": "Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Testing\\seleniumDemo\\tests\\secondTest.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "002c033b-e53b-4ed9-af59-8cc1f987a50e",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "successfully adds second todo to applicatiom",
              "fullTitle": "add second todo tests successfully adds second todo to applicatiom",
              "timedOut": null,
              "duration": 15018,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(15000)\n    //1 - launch the browser\n    //let driver = await new Builder().forBrowser(\"firefox\").build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    //await driver.quit();",
              "err": {
                "message": "Error: Timeout of 15000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Testing\\seleniumDemo\\tests\\secondTest.js)",
                "estack": "Error: Timeout of 15000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (D:\\Testing\\seleniumDemo\\tests\\secondTest.js)\n    at listOnTimeout (node:internal/timers:569:17)\n    at process.processTimers (node:internal/timers:512:7)",
                "diff": null
              },
              "uuid": "7e1cd899-e0af-4187-b2aa-26ac7c182270",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "7e1cd899-e0af-4187-b2aa-26ac7c182270"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15018,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "4937196d-9307-40f4-b418-ba3830194171",
          "title": "add PARAM todo tests",
          "fullFile": "D:\\Testing\\seleniumDemo\\tests\\paramTest.js",
          "file": "\\tests\\paramTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds ParamTest for browsers Chrome, 93.0,Windows 10",
              "fullTitle": "add PARAM todo tests successfully adds ParamTest for browsers Chrome, 93.0,Windows 10",
              "timedOut": null,
              "duration": 5403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(50000)\n    ltCapabilities.capabilities.platformName = os\n    ltCapabilities.capabilities.browserName = browser\n    ltCapabilities.capabilities.browserVersion = bVersion\n    ltCapabilities.capabilities.name = this.test.title;\n    //1 - launch the browser\n    driver = new Builder()\n    .usingServer(gridUrl)\n    .withCapabilities(ltCapabilities.capabilities)\n    .build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "190591f4-09da-4745-9cfd-fbf7fbc659e4",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds ParamTest for browsers Firefox, 91.0,Windows 10",
              "fullTitle": "add PARAM todo tests successfully adds ParamTest for browsers Firefox, 91.0,Windows 10",
              "timedOut": null,
              "duration": 27216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(50000)\n    ltCapabilities.capabilities.platformName = os\n    ltCapabilities.capabilities.browserName = browser\n    ltCapabilities.capabilities.browserVersion = bVersion\n    ltCapabilities.capabilities.name = this.test.title;\n    //1 - launch the browser\n    driver = new Builder()\n    .usingServer(gridUrl)\n    .withCapabilities(ltCapabilities.capabilities)\n    .build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "538298ff-639e-4f8a-b200-c15558a055cf",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds ParamTest for browsers Firefox, 90.0,Windows 10",
              "fullTitle": "add PARAM todo tests successfully adds ParamTest for browsers Firefox, 90.0,Windows 10",
              "timedOut": null,
              "duration": 20810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(50000)\n    ltCapabilities.capabilities.platformName = os\n    ltCapabilities.capabilities.browserName = browser\n    ltCapabilities.capabilities.browserVersion = bVersion\n    ltCapabilities.capabilities.name = this.test.title;\n    //1 - launch the browser\n    driver = new Builder()\n    .usingServer(gridUrl)\n    .withCapabilities(ltCapabilities.capabilities)\n    .build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "18b22146-4e70-403d-94fb-4dab8aece538",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "190591f4-09da-4745-9cfd-fbf7fbc659e4",
            "538298ff-639e-4f8a-b200-c15558a055cf",
            "18b22146-4e70-403d-94fb-4dab8aece538"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 53429,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "57c2eed9-fa86-4239-bd9a-d0a3dc76be0a",
          "title": "add PARAM todo tests",
          "fullFile": "D:\\Testing\\seleniumDemo\\tests\\paramTest.js",
          "file": "\\tests\\paramTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds ParamTest for browsers Chrome, 93.0,Windows 10",
              "fullTitle": "add PARAM todo tests successfully adds ParamTest for browsers Chrome, 93.0,Windows 10",
              "timedOut": null,
              "duration": 17559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(50000)\n    ltCapabilities.capabilities.platformName = os\n    ltCapabilities.capabilities.browserName = browser\n    ltCapabilities.capabilities.browserVersion = bVersion\n    ltCapabilities.capabilities.name = this.test.title;\n    //1 - launch the browser\n    driver = new Builder()\n    .usingServer(gridUrl)\n    .withCapabilities(ltCapabilities.capabilities)\n    .build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "8661a6fd-bb43-4ee9-9f62-f0189dbabbc6",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds ParamTest for browsers Firefox, 91.0,Windows 10",
              "fullTitle": "add PARAM todo tests successfully adds ParamTest for browsers Firefox, 91.0,Windows 10",
              "timedOut": null,
              "duration": 36774,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(50000)\n    ltCapabilities.capabilities.platformName = os\n    ltCapabilities.capabilities.browserName = browser\n    ltCapabilities.capabilities.browserVersion = bVersion\n    ltCapabilities.capabilities.name = this.test.title;\n    //1 - launch the browser\n    driver = new Builder()\n    .usingServer(gridUrl)\n    .withCapabilities(ltCapabilities.capabilities)\n    .build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "0bb273ce-580e-4d2d-b0bc-90061b78b3bd",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "successfully adds ParamTest for browsers Firefox, 90.0,Windows 10",
              "fullTitle": "add PARAM todo tests successfully adds ParamTest for browsers Firefox, 90.0,Windows 10",
              "timedOut": null,
              "duration": 15021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(50000)\n    ltCapabilities.capabilities.platformName = os\n    ltCapabilities.capabilities.browserName = browser\n    ltCapabilities.capabilities.browserVersion = bVersion\n    ltCapabilities.capabilities.name = this.test.title;\n    //1 - launch the browser\n    driver = new Builder()\n    .usingServer(gridUrl)\n    .withCapabilities(ltCapabilities.capabilities)\n    .build();\n    //2 - navigate to our app\n    await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n    //3 - add a todo\n    await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Learn Selenium\", Key.RETURN);\n    //5 - asssert - to check that smth is presented on the page\n    let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function (value) {\n        return value\n    });\n    //assert using chai should\n    todoText.should.equal(\"Learn Selenium\")// return the error, becouse the strings do not match\n    //4 - close the browser\n    await driver.quit();",
              "err": {},
              "uuid": "6c1ca1a2-2d5d-4429-ab50-a561f32fcf8e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8661a6fd-bb43-4ee9-9f62-f0189dbabbc6",
            "0bb273ce-580e-4d2d-b0bc-90061b78b3bd",
            "6c1ca1a2-2d5d-4429-ab50-a561f32fcf8e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 69354,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "testReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "D:/Testing/seleniumDemo/reports",
        "reportFilename": "testReport"
      },
      "version": "6.2.0"
    }
  }
}